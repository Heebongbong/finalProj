<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- namespace 명은 패키지를 포함한 DAO 인터페이스, mapper를 구분하는 식별자로 사용 -->
<mapper namespace="campingDAO">
	<insert id="camping_insert_list" parameterType="list">
		insert into camping values
		<foreach collection="list" item="item" separator=",">
			(#{item.content_id},
			#{item.facltNm},
			#{item.lineIntro},
			#{item.intro},
			#{item.allar},
			#{item.featureNm},
			#{item.induty},
			#{item.lctCl},
			#{item.addr1},
			#{item.addr2},
			#{item.mapX},
			#{item.mapY},
			#{item.tooltip},
			#{item.tel},
			#{item.homepage},
			#{item.operPdCl},
			#{item.operDeCl},
			#{item.posblFcltyCl},
			#{item.exprnProgrm},
			#{item.themaEnvrnCl},
			#{item.animalCmgCl},
			#{item.firstImageUrl})
		</foreach>
	</insert>
	
	<delete id="camping_delete_list">
		delete from camping
	</delete>
	
	<select id="camping_list_loc" resultType="campingDTO" parameterType="map">
		<choose>
			<when test="(loc1 =='경상' || loc1 =='충청'|| loc1 =='전라')">
				SELECT * FROM camping WHERE NOT firstImageUrl = '' 
					AND (addr1 LIKE CONCAT('%',#{loc1},'%') OR addr1 LIKE CONCAT('%',#{loc2},'%') 
					OR addr1 LIKE CONCAT('%',#{loc3},'%') OR addr1 LIKE CONCAT('%',#{loc4},'%') 
					OR addr1 like CONCAT('%',#{loc5},'%')) ORDER BY content_id DESC Limit 5
			</when>
			<otherwise>
				SELECT * FROM camping WHERE NOT firstImageUrl = '' 
					AND (addr1 LIKE CONCAT('%',#{loc1},'%')) order by content_id DESC Limit 5
			</otherwise>
		</choose>
	</select>
	
	<select id="camping_list_add" resultType="campingDTO" parameterType="map">
	select * from camping where not firstImageUrl = '' and 
	facltNm like concat('%', #{keyword}, '%') and 
	<if test="content_id!=0">
		<![CDATA[
			content_id < #{content_id} and
		]]>
	</if>
	(
	<foreach collection="cateList" item="item" separator="or">
		addr1 like concat('%', #{item}, '%')
	</foreach>
	) order by content_id desc Limit 5
	
	
	<!-- 	<choose>
			<when test="(loc1 =='경상' || loc1 =='충청'|| loc1 =='전라')">
				<![CDATA[
					SELECT * FROM camping WHERE NOT firstImageUrl = '' 
						AND (addr1 LIKE CONCAT('%',#{loc1},'%') OR addr1 LIKE CONCAT('%',#{loc2},'%') 
						OR addr1 LIKE CONCAT('%',#{loc3},'%') OR addr1 LIKE CONCAT('%',#{loc4},'%') 
						OR addr1 like CONCAT('%',#{loc5},'%')) 
						AND content_id < #{content_id} ORDER BY content_id DESC Limit 5
				]]>
			</when>
			<otherwise>
				<![CDATA[
					SELECT * FROM camping WHERE NOT firstImageUrl = '' 
						AND (addr1 LIKE CONCAT('%',#{loc1},'%'))
						AND content_id < #{content_id}  ORDER BY content_id DESC Limit 5
				]]>
			</otherwise>
		</choose> -->
	</select>

	<select id="camping_cont" resultType="campingDTO" parameterType="int">
		select * from camping where content_id = #{content_id}
	</select>
	
	<select id="camping_list_random" resultType="campingDTO">
		select * from camping where not firstImageUrl = '' Order by rand() Limit 10
	</select>
	
	<select id="camping_list_all" resultType="campingDTO">
		select * from camping where not firstImageUrl = '' Order by content_id desc Limit 5
	</select>
	<select id="camping_addlist_all" resultType="campingDTO" parameterType="int">
	<![CDATA[
		select * from camping where not firstImageUrl = '' and content_id < #{content_id} Order by content_id desc Limit 5
	]]>
	</select>
	
	<select id="camping_review_list" resultType="boardDTO" parameterType="int">
		select * from
		(select a.*, b.email, b.type, b.nickname, b.profile from 
		(select * from community  where cm_no not in (select cm_no from market)) a 
		join (select c.user_no, c.email, c.type, d.nickname, d.profile 
			from user c join user_profile d on c.user_no = d.user_no where type != 'D') b 
		on a.user_no = b.user_no ) e
		join review f on e.cm_no = f.cm_no
		where f.content_id = #{content_id}
		order by e.cm_no desc Limit 5
	</select>
	<select id="camping_review_list_map" parameterType="map" resultType="boardDTO">
		<![CDATA[
			select * from
			(select a.*, b.email, b.type, b.nickname, b.profile from 
			(select * from community  where cm_no not in (select cm_no from market)) a 
			join (select c.user_no, c.email, c.type, d.nickname, d.profile 
				from user c join user_profile d on c.user_no = d.user_no where type != 'D') b 
			on a.user_no = b.user_no ) e
			join review f on e.cm_no = f.cm_no
			where f.content_id = #{content_id} and f.cm_no < #{cm_no}
			order by e.cm_no desc Limit 5
		]]>
	</select>
	
</mapper>