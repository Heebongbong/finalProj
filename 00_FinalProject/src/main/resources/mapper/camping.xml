<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- namespace 명은 패키지를 포함한 DAO 인터페이스, mapper를 구분하는 식별자로 사용 -->
<mapper namespace="campingDAO">
	<insert id="camping_insert_list" parameterType="list">
		insert into camping values
		<foreach collection="list" item="item" separator=",">
			(#{item.content_id},
			#{item.facltNm},
			#{item.lineIntro},
			#{item.intro},
			#{item.allar},
			#{item.featureNm},
			#{item.induty},
			#{item.lctCl},
			#{item.addr1},
			#{item.addr2},
			#{item.mapX},
			#{item.mapY},
			#{item.tooltip},
			#{item.tel},
			#{item.homepage},
			#{item.operPdCl},
			#{item.operDeCl},
			#{item.posblFcltyCl},
			#{item.exprnProgrm},
			#{item.themaEnvrnCl},
			#{item.animalCmgCl},
			#{item.firstImageUrl})
		</foreach>
	</insert>
	<select id="camping_list_loc" resultType="campingDTO" parameterType="String">
		<choose>
			<when test="(loc =='서울' || loc =='경기'|| loc =='강원'|| loc =='경북'|| loc =='경남'|| loc =='충북'|| loc =='충남'
					|| loc =='전북'|| loc =='전남'|| loc =='제주'|| loc =='광주'|| loc =='대전'|| loc =='대구'|| loc =='울산'
					|| loc2 =='인천'|| loc2 =='경상북도'|| loc2 =='경상남도'|| loc2 =='충청북도'|| loc2 =='충청남도'
					|| loc2 =='전라북도'|| loc2 =='전라남도'|| loc2 =='세종'|| loc2 =='부산')">
				select * from camping where not firstImageUrl = '' and (addr1 like concat('%',#{loc},'%')
			           					 or addr1 like concat('%',#{loc2},'%')) order by content_id desc Limit 5
			</when>
			<otherwise>
				select * from camping where not firstImageUrl = '' and (facltNm like concat('%',#{loc},'%')) order by content_id desc Limit 5
			</otherwise>
		</choose>
	</select>

	<select id="camping_cont" resultType="campingDTO" parameterType="int">
		select * from camping where content_id = #{content_id}
	</select>
	
	<select id="camping_list_random" resultType="campingDTO">
		select * from camping where not firstImageUrl = '' and not lineIntro = '' Order by rand() Limit 10 
	</select>
	
	<select id="camping_list_add" resultType="campingDTO" parameterType="map">
		<choose>
			<when test="(loc =='서울' || loc =='경기'|| loc =='강원'|| loc =='경북'|| loc =='경남'|| loc =='충북'|| loc =='충남'
					|| loc =='전북'|| loc =='전남'|| loc =='제주'|| loc =='광주'|| loc =='대전'|| loc =='대구'|| loc =='울산'
					|| loc2 =='인천'|| loc2 =='경상북도'|| loc2 =='경상남도'|| loc2 =='충청북도'|| loc2 =='충청남도'
					|| loc2 =='전라북도'|| loc2 =='전라남도'|| loc2 =='세종'|| loc2 =='부산')">
				<![CDATA[
					select * from camping 
					where not firstImageUrl = '' and 
					(addr1 like concat('%',#{loc},'%') or 
					addr1 like concat('%',#{loc2},'%')) and 
					content_id < #{content_id} 
					order by content_id desc Limit 5
				]]>
			</when>
			<otherwise>
				<![CDATA[
					select * from camping 
					where not firstImageUrl = '' and 
					(facltNm like concat('%',#{loc},'%')) and 
					content_id < #{content_id} 
					order by content_id desc Limit 5
				]]>
			</otherwise>
		</choose>
	</select>
	
	<select id="camping_review_list" resultType="boardDTO" parameterType="int">
		select * from
		(select a.*, b.email, b.type, b.nickname, b.profile from 
		(select * from community  where cm_no not in (select cm_no from market)) a 
		join (select c.user_no, c.email, c.type, d.nickname, d.profile 
			from user c join user_profile d on c.user_no = d.user_no where type != 'D') b 
		on a.user_no = b.user_no ) e
		join review f on e.cm_no = f.cm_no
		where f.content_id = #{content_id}
		order by e.cm_no desc Limit 5
	</select>
	<select id="camping_review_list_map" parameterType="map" resultType="boardDTO">
		<![CDATA[
			select * from
			(select a.*, b.email, b.type, b.nickname, b.profile from 
			(select * from community  where cm_no not in (select cm_no from market)) a 
			join (select c.user_no, c.email, c.type, d.nickname, d.profile 
				from user c join user_profile d on c.user_no = d.user_no where type != 'D') b 
			on a.user_no = b.user_no ) e
			join review f on e.cm_no = f.cm_no
			where f.content_id = #{content_id} and f.cm_no < #{cm_no}
			order by e.cm_no desc Limit 5
		]]>
	</select>
	
</mapper>